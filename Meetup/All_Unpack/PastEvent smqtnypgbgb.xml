<?xml version="1.0" encoding="UTF-8"?>	<item><venue><address_2>Suite 100</address_2><address_1>One Memorial Drive</address_1><state>MA</state><zip>02142</zip><lat>42.360794</lat><repinned>False</repinned><phone>857-453.6000</phone><name>Microsoft New England Research &amp; Development Center (NERD)</name><city>Cambridge</city><id>1054297</id><country>us</country><lon>-71.082504</lon></venue><status>past</status><description>&lt;p&gt;&lt;span style="color : #000000 ; font-size : 13px"&gt;
&lt;p&gt;Pizza and socializing will start at 6:30&lt;/p&gt;
&lt;p&gt;Presentation will commence at 7:00&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Victor Grazi is Vice President of Application Development at Credit Suisse Client Technology Services/HOLT.&lt;/p&gt;
&lt;p&gt;He is a Java evangelist and has been building real time financial systems in Java since JDK version 1.02&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;This presentation consists of a series of animations that visualize the functionality of the components in the java.util.concurrent library.&lt;span&gt; &lt;br /&gt; &lt;br /&gt;&lt;/span&gt;Each animation features buttons that correspond to the method calls in that concurrency component. Each click of a button shows how the threads interact in real time. The animations are controlled by the actual Java concurrent component they are illustrating, so the animation is not only a visual demonstration, it's also a code sample.&lt;span&gt; &lt;br /&gt; &lt;br /&gt;&lt;/span&gt;Key points covered will be&lt;span&gt; &lt;br /&gt;&lt;/span&gt;- An explanation of the use case for each of concurrent components.&lt;span&gt; &lt;br /&gt;&lt;/span&gt;- Description of the design pattern handled by the component&lt;span&gt; &lt;br /&gt;&lt;/span&gt;- How the concurrent component handles the use&amp;nbsp;&lt;span&gt;case &lt;br /&gt;&lt;/span&gt;- Visualization through animation of the use case.&lt;span&gt; &lt;br /&gt; &lt;br /&gt;&lt;/span&gt;Components covered include,&lt;span&gt; &lt;br /&gt;&lt;/span&gt;- Executors&lt;span&gt; &lt;br /&gt;&lt;/span&gt;- Runnable/Callable&lt;span&gt; &lt;br /&gt;&lt;/span&gt;- Future&lt;span&gt; &lt;br /&gt;&lt;/span&gt;-&amp;nbsp;Semaphore &lt;br /&gt;-&amp;nbsp;Reentrant Lock &lt;br /&gt;- ReadWriteLock &lt;br /&gt;- Condition &lt;br /&gt;- BlockingQueue &lt;br /&gt;- CyclicBarrier &lt;br /&gt;- CountDownLatch &lt;br /&gt;- CompletionService&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re still using constructs like Thread.start or wait/notify, you'll want to attend this meeting.&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;br /&gt;&lt;/span&gt;The presentation is packaged as a self-executable Java Archive (JAR) file and is available for download. It'll serve as a valuable reference for any Java practitioner.&lt;/p&gt;
&lt;/span&gt;&lt;/p&gt;</description><maybe_rsvp_count>0</maybe_rsvp_count><waitlist_count>0</waitlist_count><updated>1307403280000</updated><rating><average>4.28999996185</average><count>14</count></rating><group><who>Java Developers</who><join_mode>open</join_mode><urlname>boston-java</urlname><id>87071</id><group_lat>42.3699989319</group_lat><group_lon>-71.0999984741</group_lon><name>The Boston Java Meetup Group</name></group><yes_rsvp_count>68</yes_rsvp_count><created>1275969408000</created><visibility>public</visibility><name>Visualizing java.util.concurrent</name><id>smqtnypgbgb</id><headcount>45</headcount><utc_offset>-14400000</utc_offset><time>1304375400000</time><rsvp_limit>75</rsvp_limit><event_url>http://www.meetup.com/boston-java/events/16457290/</event_url></item>