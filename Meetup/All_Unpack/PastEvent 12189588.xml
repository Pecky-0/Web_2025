<?xml version="1.0" encoding="UTF-8"?>	<item><venue><address_2>Suite 100</address_2><address_1>One Memorial Drive</address_1><state>MA</state><zip>02142</zip><lat>42.360794</lat><repinned>False</repinned><phone>857-453.6000</phone><name>Microsoft New England Research &amp; Development Center (NERD)</name><city>Cambridge</city><id>1054297</id><country>us</country><lon>-71.082504</lon></venue><status>past</status><description>In preparation for &lt;a href="http://us.pycon.org/2010/about/" target="_blank"&gt;PyCon in Atlanta&lt;/a&gt; in February, three more Boston-area PyCon speakers will rehearse their talks for us.  It's a full night, so we'll start promptly at 7:00.  For some open-ended mingling, show up as early as &lt;b&gt;6:15&lt;/b&gt;!&lt;br /&gt;&lt;br /&gt;&lt;hr /&gt;&lt;b&gt;Demystifying Non-Blocking and Asynchronous I/O&lt;/b&gt;&lt;br /&gt;&lt;i&gt;Peter Portante&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;We will first define what blocking, non-blocking, synchronous and asynchronous I/O are under the POSIX interfaces. We'll cover how and when these four types of I/O should be used, and their individual effects on a Python based application. The notion of concurrency will be discussed by comparing a simple threaded blocking I/O application to a simple single threaded non-blocking I/O application by walking the attendees through the python code for those applications.&lt;br /&gt;&lt;br /&gt;&lt;hr /&gt;&lt;b&gt;Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations&lt;/b&gt;&lt;br /&gt;&lt;i&gt;Glyph Lefkowitz&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Python's flexible object model allows library and framework authors to add very flexible declarations. Metaclasses, decorators, callable objects, and operator overloading practically allow libraries to re-define the language in order to provide a more concise, natural style for that library. Unfortunately, the library user's first experience of such conveniences is often confusing, because it's not clear what's going on.&lt;br /&gt;&lt;br /&gt;In this talk, I will try to convince you that all of this wonderful magic isn't all that weird. This is not a typical how-to session on how to use a particular feature, either of Python or of Twisted, but will rather draw examples from Python, Twisted, and Zope to illustrate techniques you can use to read and understand &amp;quot;magical&amp;quot; Python code.&lt;br /&gt;&lt;br /&gt;&lt;hr /&gt;&lt;b&gt;Keynote: Relentlessly Pursuing Opportunities With Python, or why the AIs will Spare Us All!&lt;/b&gt;&lt;br /&gt;&lt;i&gt;Antonio Rodriguez&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;hr /&gt;&lt;b&gt;DJ-ing in Python: Audio processing fundamentals&lt;/b&gt;&lt;br /&gt;&lt;i&gt;Edward Abrams&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;I have been wanting to learn about audio processing because I'd eventually like to write a simple DJ-ing application. What better way to explore some intermediate level programming concepts, as well as an interesting media library (PyMedia), than by doing it in Python. This talk covers what I learned on my way to creating a console-based skeleton of a DJ-ing application with the intention of later returning to add a GUI on top.&lt;br /&gt;</description><event_hosts><event_hosts_item><member_name>Ned Batchelder</member_name><member_id>1824278</member_id></event_hosts_item></event_hosts><maybe_rsvp_count>17</maybe_rsvp_count><waitlist_count>0</waitlist_count><updated>1265415251000</updated><rating><average>4.80000019073</average><count>10</count></rating><group><who>Pythonistas</who><join_mode>open</join_mode><urlname>bostonpython</urlname><id>469457</id><group_lat>42.3800010681</group_lat><group_lon>-71.1299972534</group_lon><name>The Boston Python User Group</name></group><yes_rsvp_count>60</yes_rsvp_count><created>1262359787000</created><visibility>public</visibility><name>PyCon on the Charles 2010, part 2</name><id>12189588</id><headcount>61</headcount><utc_offset>-18000000</utc_offset><time>1265241600000</time><event_url>http://www.meetup.com/bostonpython/events/12189588/</event_url></item>